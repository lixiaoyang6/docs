import{_ as a,c as i,o as n,ag as t}from"./chunks/framework.Ddj9Gik_.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"FormData.md","filePath":"FormData.md","lastUpdated":1747302253000}'),e={name:"FormData.md"};function l(p,s,h,o,r,k){return n(),i("div",null,s[0]||(s[0]=[t(`<h2 id="formdata" tabindex="-1">FormData <a class="header-anchor" href="#formdata" aria-label="Permalink to &quot;FormData&quot;">​</a></h2><p>在 JavaScript 中，<code>FormData</code> 是一个用于构造 <strong>表单数据（form-data）</strong> 的 Web API 对象，专门用来处理 <code>multipart/form-data</code> 类型的 HTTP 请求（常见于文件上传场景）。在你的代码中，它用于将文件分块（<code>chunk</code>）和其他元数据一起发送到服务端。</p><hr><h3 id="formdata-的作用详解" tabindex="-1"><strong>FormData 的作用详解</strong> <a class="header-anchor" href="#formdata-的作用详解" aria-label="Permalink to &quot;**FormData 的作用详解**&quot;">​</a></h3><h4 id="_1-数据结构" tabindex="-1"><strong>1. 数据结构</strong> <a class="header-anchor" href="#_1-数据结构" aria-label="Permalink to &quot;**1. 数据结构**&quot;">​</a></h4><ul><li><strong>键值对存储</strong>：通过 <code>append</code> 方法添加字段，每个字段由 <code>name</code> 和 <code>value</code> 组成。</li><li><strong>支持多种数据类型</strong>：可附加字符串、Blob（如文件）、File 对象等。</li></ul><h4 id="_2-在你的代码中的用途" tabindex="-1"><strong>2. 在你的代码中的用途</strong> <a class="header-anchor" href="#_2-在你的代码中的用途" aria-label="Permalink to &quot;**2. 在你的代码中的用途**&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filename&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, filename);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件名（如 example.txt）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hash);          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件哈希（用于校验完整性）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, index);        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分块序号（如第 3 块）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chunk);          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件分块数据（二进制内容）</span></span></code></pre></div><ul><li><p><strong>服务端接收示例</strong>：<br> 在 Node.js（使用 Express + Multer）中，可通过以下方式获取：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上传接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upload.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.body; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 非文件字段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fileChunk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.file;                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件字段（对应 formData.append(&quot;file&quot;, chunk)）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><h4 id="_3-为什么用-formdata" tabindex="-1"><strong>3. 为什么用 FormData？</strong> <a class="header-anchor" href="#_3-为什么用-formdata" aria-label="Permalink to &quot;**3. 为什么用 FormData？**&quot;">​</a></h4><ul><li><strong>原生支持文件传输</strong>：浏览器会自动将 <code>FormData</code> 转换为 <code>multipart/form-data</code> 格式，适合传输二进制文件。</li><li><strong>兼容分块上传</strong>：每个分块独立发送时，附带元数据（如 <code>hash</code>、<code>index</code>），服务端可据此重组文件。</li></ul><hr><h3 id="formdata-的底层行为" tabindex="-1"><strong>FormData 的底层行为</strong> <a class="header-anchor" href="#formdata-的底层行为" aria-label="Permalink to &quot;**FormData 的底层行为**&quot;">​</a></h3><h4 id="_1-http-请求头" tabindex="-1"><strong>1. HTTP 请求头</strong> <a class="header-anchor" href="#_1-http-请求头" aria-label="Permalink to &quot;**1. HTTP 请求头**&quot;">​</a></h4><p>当使用 <code>FormData</code> 时，浏览器会自动设置请求头：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> multipart/form-data; boundary=----WebKitFormBoundaryABC123</span></span></code></pre></div><ul><li><strong>boundary</strong>：分隔符，用于划分不同字段的边界。</li></ul><h4 id="_2-请求体格式" tabindex="-1"><strong>2. 请求体格式</strong> <a class="header-anchor" href="#_2-请求体格式" aria-label="Permalink to &quot;**2. 请求体格式**&quot;">​</a></h4><p>发送的请求体内容大致如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>------WebKitFormBoundaryABC123</span></span>
<span class="line"><span>Content-Disposition: form-data; name=&quot;filename&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>example.txt</span></span>
<span class="line"><span>------WebKitFormBoundaryABC123</span></span>
<span class="line"><span>Content-Disposition: form-data; name=&quot;hash&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>a1b2c3d4</span></span>
<span class="line"><span>------WebKitFormBoundaryABC123</span></span>
<span class="line"><span>Content-Disposition: form-data; name=&quot;index&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>------WebKitFormBoundaryABC123</span></span>
<span class="line"><span>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chunk-3&quot;</span></span>
<span class="line"><span>Content-Type: application/octet-stream</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;二进制文件内容&gt;</span></span>
<span class="line"><span>------WebKitFormBoundaryABC123--</span></span></code></pre></div><hr><h3 id="注意事项" tabindex="-1"><strong>注意事项</strong> <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;**注意事项**&quot;">​</a></h3><ol><li><p><strong>字段顺序无关</strong>：服务端通过字段名（如 <code>filename</code>、<code>file</code>）解析数据，与 <code>append</code> 顺序无关。</p></li><li><p><strong>文件字段建议放在最后</strong>：某些服务端框架（如 Multer）要求文件字段是最后一个字段，否则可能解析失败。</p></li><li><p><strong>Blob/File 对象的处理</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chunk, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chunk-3.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第三个参数为文件名（可选）</span></span></code></pre></div></li></ol><hr><h3 id="替代方案" tabindex="-1"><strong>替代方案</strong> <a class="header-anchor" href="#替代方案" aria-label="Permalink to &quot;**替代方案**&quot;">​</a></h3><ul><li><strong>Base64 编码</strong>：将文件转为字符串通过 JSON 发送，但体积膨胀约 33%，效率低。</li><li><strong>二进制流</strong>：直接发送 <code>Blob</code>，但无法附带元数据，需通过 URL 参数或自定义 Header 传递。</li></ul><hr><p>通过 <code>FormData</code>，你可以高效、规范地实现文件分块上传，是 Web 开发中处理文件传输的标准方案。</p>`,28)]))}const g=a(e,[["render",l]]);export{c as __pageData,g as default};
